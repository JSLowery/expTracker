<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, September 23, 2017, 8:38 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Gold_exp_rare_Tracker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Gold_exp_rare_Tracker"
   author="Sonet"
   id="eef2ef3a2af02ddc313e73f8"
   language="Lua"
   purpose="Tracks and stored gold, exp, rare exp also searchable"
   save_state="y"
   date_written="2017-09-23 20:35:11"
   requires="4.90"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   keep_evaluating="y"
   match="^You receive (.+) \'rare kill\' experience bonus\.$"
   script="rare_trig"
   regexp="y"
   send_to="12"
   sequence="1"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   keep_evaluating="y"
   match="(.*)"
   script="rare_trig"
   name="rare_catch"
   regexp="y"
   send_to="12"
   sequence="1"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="Y"
   keep_evaluating="y"
   match="^You receive ([\d+\+?]+) experience (point|points)\.$"
   script="exp_trig"
   regexp="y"
   send_to="12"
   sequence="1"
   omit_from_output="n"
  >
  </trigger>

  <trigger
   enabled="Y"
   keep_evaluating="y"
   match="^([\[]\d+[\]])?\s?(?=You)(.*) \[(\d+)\]$"
   script="concat_name"
   regexp="y"
   send_to="12"
   sequence="1"
   omit_from_output="Y"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="level_check"
   match="^level$"
   enabled="y"
   regexp="y"
   script="level_check"
   group="level"
   send_to="12"
   sequence="100"
  >
  <send>EnableTriggerGroup("spell_prac", false)</send>
  </alias>
</aliases>

<!--  Timers  -->

<timers>
  <timer name="bobtest" enabled="n" minute="5" second="0.00" offset_second="0.00"    send_to="12"
>
  <send>Send(' ')</send>

  </timer>
</timers>

<!--  Variables  -->

<variables>
  <variable name="QRoom">at the base of the mountain</variable>
</variables>

<!--  Script  -->


<script>
<![CDATA[
require "tprint"

local current_enemy_gbl
local mylevel

function level_check()
    Send('level')
    db=sqlite3.open(GetPluginInfo (GetPluginID (), 20) .. 'exp_tracker.db')
    db:busy_timeout(500)
    if mylevel == nil or char_status == nil then
        res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
        luastmt = "gmcpdatacharstatus = " .. gmcparg
        assert (loadstring (luastmt or "")) ()
        mylevel = tonumber(gmcpdatacharstatus.level)
        char_status = gmcpdatacharstatus
    end
    sql =   " select * "..
            " from exp_tracker t1 "..
            " where t1.my_level = %d and "..
            " t1.exp+t1.rare_exp = (select max(exp+rare_exp) from exp_tracker where my_level = %d) "..
            " union "..
            " select * "..
            " from exp_tracker "..
            " where my_level = %d and "..
            " rare_exp <> 0 "..
            " order by exp desc, rare_exp desc"
            
    sql = string.format(sql, mylevel, mylevel, mylevel)
    ret_val = {}
    ColourNote("Gray", ""," Name                          Area       Room Name             exp(rare inc)Tot    ")
    ColourNote("Gray", "", "------------------------------------------------------------------------");

    for row in db:nrows(sql) do
        table.insert(ret_val, row)
    end
    for _, row in pairs(ret_val) do
        if _ >= 10 then break end
        print (string.format("%-30s %-10s %-25s %-3s(%s)%s ", row.name, row.area_name,
            row.room_name, row.exp, row.rare_exp, tonumber(row.exp)+tonumber(row.rare_exp)))
    end
    db:close()
end

function rare_trig(name, line, wildcards)
    --print(line)
    if string.match(line, 'rare kill') then
        num = string.match(line, '%d+')
        table.insert(mob_table, num)
    else
        table.insert(mob_table, 0)
    end
    EnableTrigger('rare_catch', 0)
    write_entry(mob_table)
end

mob_table={}
function exp_trig(name, line, wildcards)
    
    exp_str = wildcards[1]
    -- print(current_enemy_gbl)
    -- if currentRoom ~= nil then
    --     tprint(currentRoom)
    -- end
    -- print(wildcards[1])
    EnableTrigger('rare_catch', 1)
    local write_table = {}
    table.insert(write_table, current_enemy_gbl)
    for i,p in pairs(currentRoom) do
        table.insert(write_table, p)
    end
    
   
    if string.match(exp_str, "+")~= nil then
        values = split(exp_str, '+')
        exp_str = 0
        for _,value in pairs(values) do
            exp_str = exp_str + tonumber(value)
        end
    end
    --print(exp_str)
    table.insert(write_table, exp_str)
    mob_table = write_table
    --tprint(mob_table)
end

function split(s, delimiter)
    result = {}
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match)
    end
    return result
end

function write_entry( entry )
    if mylevel == nil or char_status == nil then
            res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
            luastmt = "gmcpdatacharstatus = " .. gmcparg
            assert (loadstring (luastmt or "")) ()
            mylevel = tonumber(gmcpdatacharstatus.level)
            char_status = gmcpdatacharstatus
    end
    db=sqlite3.open(GetPluginInfo (GetPluginID (), 20) .. 'exp_tracker.db')
    db:busy_timeout(500)
    --tprint(mob_table)
        -- dbkt:busy_handler(myHandler)
    sql = [[insert into exp_tracker (
            my_level,
            name,
            room_num,
            room_name,
            area_name,
            exp,
            rare_exp,
            alignment)
            values (%d, %s, %s, %s, %s, %d, %d, %d)]]
    sql = string.format(sql, mylevel, fixsql(mob_table[1]), fixsql(mob_table[2]),
        fixsql(mob_table[3]), fixsql(mob_table[4]), mob_table[5], mob_table[6] or 0, char_status.align)
   --print(sql)
    rc = db:exec(sql)
        if rc ~= 0 then
            print('insert table error:')
            Note ( DatabaseError('db'))
            db:exec("ROLLBACK")
            
            return
        end--if
    
   -- tprint(entry)
    db:close()
end


function concat_name(name, line, wildcards, styles)
    local test_table = {}
    str = ""
    for i,p in pairs(styles) do
        --tprint(p)
        ColourTell(RGBColourToName(p.textcolour), RGBColourToName(p.backcolour),p.text)
        --str = str .. ","..p.textcolour..","..p.text
        table.insert(test_table,{
            p.text,
            RGBColourToName(p.textcolour),
            RGBColourToName(p.backcolour)
        })
    end
    found = false
    current_enemy_gbl = check_cur_mob(test_table)
    
    Note(current_enemy_gbl )

   -- tprint(test_table)
end


function check_cur_mob(test_table)
    if not enemy then 
        enemy = ""
    end
    cur_mob = nil
    --For note, people should use damage output that isn't basic.. this is supposed to be an unused
    -- section of code.
    if #test_table == 3 then
        local line = test_table[1][1]
        if string.find(line, "%!") ~= nil then
            temp= string.sub(line, 8, string.find(line, "%!")-1 )
        elseif string.find(line, "%.") then
            temp= string.sub(line, 8, string.find(line, "%.")-1 )
        end--if
        for i,v in pairs(damage_verbs) do
            o, p =string.find(temp, v)
            if p ~= nil then
                temp = string.sub(temp, p+1, #temp)
                
                return temp
            end--i
        end--for
        i = string.find(temp, "%A")
        while i  do
            temp= string.sub(temp, i+1, #temp )
            i=string.find(temp, "[%A][%s]")
        end -- while
        temp= string.sub(temp, 2, #temp )
        return temp
    end
    for i, p in pairs(test_table) do
        --tprint(p)           
        if i>1 and p[2] == 'green' then
            cur_mob = string.sub(p[1], 0, -3)
            if cur_mob ~= enemy and cur_mob ~= 'Someone' then
                -- tprint(p)
                -- print(string.find(p[1],enemy))
                -- print("===========")
                -- print(p[1])
                -- print(cur_mob)
                -- print(enemy)
                -- print("===========")
                print("I have been set", cur_mob)
                ret = cur_mob
            elseif enemy ~= current_enemy_gbl then
                print("I have been reset", enemy)
                ret = enemy
            -- else
            --     Note(current_enemy_gbl)
            --     Note(enemy)
            end
        end
    end

    if cur_mob == nil and enemy ~= nil then
        print('both were nil setting to enemy')
        ret = enemy
    end
    return ret
end

function OnPluginBroadcast (msg, id, name, text)
    --print(text)
    if (id == '3e7dedbe37e44942dd46d264') then
        if (text == "char.status") then
            res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
            luastmt = "gmcpdata = " .. gmcparg
            assert (loadstring (luastmt or "")) ()
            if gmcpdata.state == '8' then
                -- print(gmcpdata.enemy)
                enemy = gmcpdata.enemy
            end
        end
        if (text == "char.status") then
            res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")
            luastmt = "gmcpdatacharstatus = " .. gmcparg
            assert (loadstring (luastmt or "")) ()
            char_status = gmcpdatacharstatus

            mylevel = tonumber(gmcpdatacharstatus.level)
        end
        if (text == "room.info") then
            res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")
            luastmt = "gmcpdata = " .. gmcparg
            assert (loadstring (luastmt or "")) ()
            currentRoom = {
              name = gmcpdata.name,
              roomid = gmcpdata.num,
              areaid = gmcpdata.zone
            }
        end
    end
end

--I hate you, yes you. You use a basic output for damage and are forcing me
-- to use this akward and unmaintainable table..
damage_verbs = {'misses ',
' damages ',
' damage ',
' tickles ',
' bruises ',
' scratches ',
' grazes ',
' nicks ',
' blasts',
' scars ',
' hits ',
' injures ',
' wounds ',
' mauls ',
' maims ',
' mangles ',
' mars ',
' massacres ',
' dismembers ',
' devastates ',
' disembowels ',
' lacerates ',
' LACERATES ',
' DECIMATES ',
' DEVASTATES ',
' ERADICATES ',
' OBLITERATES ',
' EXTIRPATES ',
' INCINERATES ',
' MUTILATES ',
' DISEMBOWELS ',
' MASSACRES ',
' DISMEMBERS ',
' RENDS ',
' meteorites ',
' glaciates ',
' nukes ',
' implodes ',
' asphyxiates ', --
' liquidates ', --
' fissures ', --
' exterminates ', --
' ravages ', --
' atomizes ', --
' sunders ', --
' tears into ', --
' destroys ', --
' pulverizes ', --
' demolishes ', --
' mutilates ', --
' incinerates ', --
' extirpates ', --
' obliterates ', --
' eradicates ', --
' annihilates ',-- nnih%
' evaporates ',-- vapor%
' ruptures ',-- upt%
' shatters ',-- hatter%
' slaughters ', -- laughters%
' vaporizes ',--vapor%
' wastes ',-- astes%
' shreds ',
' cremates ', -- remat%
' supernovas ',
' The charge slams into ',
' does UNSPEAKABLE things to ',
' does UNTHINKABLE things to ',
' does UNIMAGINABLE things to ',
' does UNBELIEVABLE things to ',
' %- BLASTS %- ',
' %-= DEMOLISHES =%- ',
' %*%* SHREDS %*%* ',
' %*%*%*%* DESTROYS %*%*%*%* ',
' %*%*%*%*%* PULVERIZES %*%*%*%*%* ',
' %-=%- VAPORIZES %-=%- ',
' <%-==%-> ATOMIZES <%-==%-> ',
' <%-:%-> ASPHYXIATES <%-:%-> ',
' <%-%*%-> RAVAGES <%-%*%-> ',
' <>%*<> FISSURES <>%*<> ',
' <%*><%*> LIQUIDATES <%*><%*> ',
' <%*><%*><%*> EVAPORATES <%*><%*><%*> ',
' <%-=%-> SUNDERS <%-=%-> ',
' <=%-=><=%-=> TEARS INTO <=%-=><=%-=> ',
' <%->%*<=> WASTES <=>%*<%-> ',
' <%-%+%-><%-%*%-> CREMATES <%-%*%-><%-%+%-> ',
' <%*><%*><%*><%*> ANNIHILATES <%*><%*><%*><%*> ',
' <%-%-%*%-%-><%-%-%*%-%-> IMPLODES <%-%-%*%-%-><%-%-%*%-%-> ',
' <%-><%-=%-><%-> EXTERMINATES <%-><%-=%-><%-> ',
' <%-==%-><%-==%-> SHATTERS <%-==%-><%-==%-> ',
' <%*><%-:%-><%*> SLAUGHTERS <%*><%-:%-><%*> ',
' <%-%*%-><%-><%-%*%-> RUPTURES <%-%*%-><%-><%-%*%-> ',
' <%-%*%-><%*><%-%*%-> NUKES <%-%*%-><%*><%-%*%-> ',
' %-<%[=%-%+%-=%]<:::<>:::> GLACIATES <:::<>:::>%[=%-%+%-=%]>%- ',
' <%-=%-><%-:%-%*%-:%-><%*%-%-%*> METEORITES <%*%-%-%*><%-:%-%*%-:%-><%-=%-> ',
' <%-:%-><%-:%-%*%-:%-><%-%*%-> SUPERNOVAS <%-%*%-><%-:%-%*%-:%-><%-:%-> ',
}


function fixsql (s)
   if s then
      return "'" .. (string.gsub (s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
   else
      return "NULL"
   end -- if
end -- fixsql
]]>
</script>


</muclient>
